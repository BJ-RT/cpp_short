const:
  修饰变量成为常量
  定义时必须进行初始化
  不能赋值
  
const与define的区别：
  宏定义发生在预处理阶段，如果有bug，只能到运行的时候才能发现
  const发生在编译阶段，如果有bug，能立即发现
  
指针：
  *p是一个变量。
  p是一个地址一个内存地址，不是一个变量。
  
const修饰指针：
  const int *p = &value
    当const位于*左边的时候，成为常量指针
    *p = 111; error,不能改变指针所指变量的值
     p = &value2; ok,可以改变指针本身（指针的指向）
    int const *p 同
  int * const p = &value
    p不能改变
    *p可改变
    
函数指针                 指针函数
int (*pf)(int )         int* func(int )
数组指针                 指针数组
int (*Array)[]          int* pArray[]

申请空间：
    8 //c语言
    9 void test1()
   10 {   
   11     int *pInt = (int *)malloc(sizeof(int)); //1、申请堆空间
   12     memset(pInt, 0, sizeof(int)); //2、初始化（清零）
   13     *pInt = 10; //3、赋值
   14     printf("*pInt = %d\n", *pInt);
   15     printf("&pInt = %p\n", &pInt); //申请的堆空间地址
   16     printf(" pInt = %p\n",  pInt); //局部变量的栈地址
   17     free(pInt); //4、回收堆空间
   18 }
   19 
   20 //c++
   21 void test2()
   22 {
   23     int *pInt = new int(100); //1、申请堆空间，然后进行初始化，进行赋值
   24     cout << "*pInt = " << *pInt << endl;
   25     delete pInt; //2、回收堆空间
   26 
   27     //申请数组
✹  28     int *pArray = new int[10](); //1、申请堆空间，进行初始化，进行赋值
   29     for(int i = 0; i < 10; ++i)
   30     {
   31         pArray[i] = i*i;                                                
   32     }
   33     delete []pArray; //2、释放对空间，中括号代表数组
   34 }
  
malloc&free与new&delete之间的区别：
  不同：前者是c语言的库函数，后者是C++的关键字
       前者只能申请原始的堆空间，后者申请堆空间并进行初始化
  相同：都是用来申请堆空间的
       都必须成对出现，否则会造成内存泄漏

内存越界：
内存踩踏：
内存溢出：
野指针：

引用：
  变量的别名
  操作引用与操作变量本身是一样的
  定义时必须进行初始化
  引用一经绑定就不能改变指向
  引用的底层实现就是一个指针，* const 指针常量
  引用的提出为了减少指针的使用
  
  指针与引用的区别：
    相同：都是地址的概念，指针指向一块内存，它的内容是所指内存的地址；引用是某块内存的别名。
    不同：指针是一个实体，引用是一个别名
         引用使用时无需解引用(*)，指针需要解引用
         引用只能在定义时被初始化一次，之后不可改变，指针可变
         引用没有const，指针有
         引用不能为空，指针可
         “sizeof引用”得到的是所指向的变量（对象）的大小，“sizeof指针”得到的是指针本身（所指向的变量或对象的地址）的大小
         指针和引用的自增（++）运算符意义不一样
         从内存分配上看，程序为指针变量分配内存区域，而引用不分配
        
函数传参的两种形式：
  实质：地址传递
  int swap(int *px, int *py)
  {
      int temp = *px;
      *px = *py;
      *py = temp;
  }
  swap(&a, &b)
  
  实质：操作引用与本身是一样的
  int swap(int &px, int &py)
  {
      int temp = px;
      px = py;
      py = temp;
  }
  swap(a, b)
   
改变默认模板：
  cd .vim/plugged/prepare-code/snippet

引用作为函数的返回类型：
  int &fun()
  {
    int number;//局部变量
    return number;
  } // 不要返回局部变量的引用，生命周期已经结束
  
  6 int arr[10] = {1,3,5,9,10};//全局变量
  7 int &getIndex(int idx)
  8 {
  9     return arr[idx];
 10 }
 11 
 12 void test()
 13 {
 14     cout << "getIndex(0) = " << getIndex(0) << endl;
 15 }
 函数返回引用的前提：实体的生命周期一定要大于函数的生命周期
 
 建议不要返回堆空间的引用，除非有内存回收机制                            
 19 int &getHeapDate()
 20 {
 21     int *pInt = new int(200);
 22     return *pInt;
 23 }
 24 
 25 void test1()
 26 {
 27     int a = 3, b = 4;
 28     int c = a + getHeapDate() + b;
 29     cout << "c = " << c << endl;
 30 
 31     //避免内存泄漏
 32     int &ref = getHeapDate();
 33     delete &ref; //&ref代表地址
 34 }
 
 
C++强制转换：
  1、static_cast（主要）
    iNumber = static_cast<int>(fNumber);
  2、const_cast
  3、dynamic_cast
    主要用于基类和派生类之间的
  4、reinterpret_cast
